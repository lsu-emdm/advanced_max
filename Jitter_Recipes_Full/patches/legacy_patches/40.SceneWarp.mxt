max v2;#N vpatcher 52 44 721 473;#P origin -3 25;#P window setfont "Sans Serif" 9.;#P window linecount 1;#P newex 271 351 60 196617 s tex_dims;#P newex 271 331 86 196617 pak dim 640 480;#P number 347 312 35 9 0 0 0 3 0 0 0 221 221 221 222 222 222 0 0 0;#P number 309 312 35 9 0 0 0 3 0 0 0 221 221 221 222 222 222 0 0 0;#P comment 361 168 29 196617 fade:;#P flonum 390 167 35 9 0 0 0 3 0 0 0 221 221 221 222 222 222 0 0 0;#P comment 223 169 61 196617 luma range:;#P flonum 323 167 35 9 0 0 0 3 0 0 0 221 221 221 222 222 222 0 0 0;#P flonum 284 167 35 9 0 0 0 3 0 0 0 221 221 221 222 222 222 0 0 0;#P hidden newex 284 185 49 196617 pak 0. 1.;#P window setfont "Arial Black" 24.;#P comment 493 39 160 791478296 SceneWarp;#B frgb 136 59 14;#P user panel 3 21 650 56;#X brgb 234 168 30;#X frgb 0 0 0;#X border 0;#X rounded 0;#X shadow 0;#X done;#P user panel 3 392 650 20;#X brgb 134 175 123;#X frgb 0 0 0;#X border 0;#X rounded 0;#X shadow 0;#X done;#P window setfont "Sans Serif" 9.;#N vpatcher 41 237 509 393;#P window setfont "Sans Serif" 9.;#P window linecount 6;#P comment 2 51 429 196617 If we were to eliminate the feedback texture from this process \, and try to do everything with only one texture \, using this technique \, you would be drawing the texture to screen while over-writing it at the same time. This will just lead to pixel-garbage. Using separate jit.gl.sketch objects with @layer to draw the scene is simple and far more elegant than trying to manage drawing order using a trigger-bang technique. This way you can ensure that you are always displaying a valid texture. This is also much more efficient and reliable than using the "to_texture" method of jit.gl.render.;#P window linecount 0;#P comment 2 29 140 196617 Why use 2 textures for this?;#P pop;#P newobj 559 81 94 196617 p why 2 textures?;#P comment 438 230 195 196617 maps alpha-mapped video to overlay plane;#P comment 438 265 137 196617 maps captured scene to plane;#P comment 440 302 192 196617 maps scene feedback to a distorted mesh;#P comment 439 344 87 196617 sketch objects;#P comment 21 82 87 196617 2. turn on qmetro;#N vpatcher 777 267 1358 647;#P origin 0 -4;#P window setfont "Sans Serif" 9.;#P window linecount 1;#P newex 35 24 60 196617 r tex_dims;#P newex 277 94 32 196617 sel 1;#P window linecount 3;#P comment 82 280 203 196617 scale the noise output and add it to the x \, y vertex values of our plane to slightly distort the mesh.;#P window linecount 0;#P message 44 89 30 196617 read;#P window linecount 1;#P newex 35 108 74 196617 jit.gl.slab test;#P newex 35 69 226 196617 jit.gl.texture test @name fb_tex @dim 640 480;#N counter 200;#X flags 0 0;#P newobj 278 68 66 196617 counter 200;#P newex 278 20 41 196617 r draw;#P newex 69 256 218 196617 jit.op @op +;#P newex 277 114 110 196617 jit.noise 5 float32 5 5;#P newex 277 156 279 196617 jit.expr @expr "snorm[0]" snorm[1] "0." norm[0] norm[1];#P comment 20 52 21 196617 FB;#P newex 69 324 396 196617 jit.gl.mesh test @transform_reset 2 @automatic 0 @name fb_plane @color 1. 1. 1. 1.;#P newex 69 234 174 196617 jit.op @op * @val 0.05 0.05 0. 0. 0.;#P newex 69 214 106 196617 jit.op @op - @val 0.5;#P window linecount 0;#P comment 111 108 107 196617 load a shader here for feedback processing;#P comment 300 180 243 196617 this creates a basic flat plane with texcoords for display of the texture;#P comment 347 68 100 196617 bang new mesh every 200 frames;#P fasten 10 0 12 0 283 45 40 45;#P connect 17 0 12 0;#P connect 12 0 13 0;#P connect 14 0 13 0;#P fasten 8 0 3 0 282 151 74 151;#P connect 3 0 4 0;#P connect 4 0 9 0;#P connect 9 0 5 0;#P fasten 13 0 5 0 40 300 74 300;#P fasten 11 2 16 0 319 92 282 92;#P connect 16 0 8 0;#P connect 8 0 7 0;#P connect 7 0 9 1;#P connect 10 0 11 0;#P pop;#P newobj 411 283 89 196617 p feedback_image;#N vpatcher 30 89 597 232;#P window setfont "Sans Serif" 9.;#P window linecount 1;#P newex 72 31 60 196617 r tex_dims;#P comment 379 52 80 196617 scene_capture;#P comment 50 51 21 196617 SC;#P newex 72 50 299 196617 jit.gl.texture test @name sc_tex @dim 640 480 @filter nearest;#P window linecount 2;#P newex 72 71 226 196617 jit.gl.videoplane test @transform_reset 2 @texture sc_tex @automatic 0 @name sc_plane;#P connect 4 0 1 0;#P pop;#P newobj 411 247 83 196617 p scene_capture;#N vpatcher 30 89 522 287;#P window setfont "Sans Serif" 9.;#P window linecount 0;#P message 214 55 49 196617 0.3 1.01;#P newex 214 33 48 196617 loadbang;#P inlet 371 40 15 0;#P inlet 277 40 15 0;#P message 371 81 90 196617 param fade \$1 \$1;#P message 277 81 87 196617 param lum \$1 \$2;#P newex 30 45 41 196617 r draw;#P newex 72 109 257 196617 jit.gl.slab test @file ab.lumagate.jxs @colormode uyvy;#P newex 72 84 181 196617 jit.qt.grab 640 480 @colormode uyvy;#P comment 295 128 43 196617 overlay;#P window linecount 2;#P newex 72 128 222 196617 jit.gl.videoplane test @transform_reset 2 @automatic 0 @name ol_plane @blend_enable 1;#P window linecount 1;#P comment 50 128 21 196617 OL;#P inlet 72 45 15 0;#P connect 0 0 4 0;#P connect 6 0 4 0;#P fasten 7 0 5 0 282 106 77 106;#P fasten 8 0 5 0 376 106 77 106;#P connect 4 0 5 0;#P connect 5 0 2 0;#P connect 11 0 12 0;#P connect 9 0 7 0;#P fasten 12 0 7 0 219 74 282 74;#P connect 10 0 8 0;#P pop;#P newobj 410 211 85 196617 p overlay_image;#N vpatcher 646 436 1142 765;#P window setfont "Sans Serif" 9.;#P comment 94 258 100 196617 3.draw SC to screen;#P comment 110 181 86 196617 2.draw SC to FT;#P comment 79 113 114 196617 1.draw FT and OL to SC;#P message 194 158 143 196617 reset \, drawobject sc_plane 0;#P newex 194 178 207 196617 jit.gl.sketch test @layer 2 @capture fb_tex;#P message 193 236 143 196617 reset \, drawobject sc_plane 0;#P newex 36 59 48 196617 loadbang;#P message 193 91 249 196617 reset \, drawobject fb_plane 0 \, drawobject ol_plane 0;#P newex 193 256 129 196617 jit.gl.sketch test @layer 3;#P newex 193 111 208 196617 jit.gl.sketch test @layer 1 @capture sc_tex;#P fasten 3 0 2 0 41 82 198 82;#P connect 2 0 0 0;#P fasten 3 0 4 0 41 226 198 226;#P connect 4 0 1 0;#P fasten 3 0 6 0 41 152 199 152;#P connect 6 0 5 0;#P pop;#P newobj 411 323 86 196617 p render_master;#P flonum 113 82 35 9 0 0 0 3 0 0 0 221 221 221 222 222 222 0 0 0;#P user jit.fpsgui 4 174 60 196617 0;#P message 457 190 30 196617 open;#N vpatcher 53 128 196 272;#P window setfont "Sans Serif" 9.;#P newex 41 99 41 196617 s draw;#P newex 17 52 58 196617 t b b erase;#P inlet 17 32 15 0;#P outlet 17 83 15 0;#P connect 1 0 2 0;#P fasten 2 2 0 0 70 75 22 75;#P connect 2 0 0 0;#P connect 2 1 3 0;#P pop;#P newobj 4 129 42 196617 p Draw;#P toggle 4 319 15 0;#P message 4 339 68 196617 fullscreen \$1;#P newex 4 357 150 196617 jit.window test @size 640 480;#P toggle 4 81 15 0;#P newex 4 100 120 196617 qmetro 5;#P newex 4 154 187 196617 jit.gl.render test @erase_color 1 1 1 1;#P window linecount 5;#P comment 43 220 346 196617 This patch uses OpenGL scene capturing to perform video feedback. This is accomplished by rendering the incoming video onto a videoplane \, and then capturing this to a texture. Capturing scenes to a texture makes some very interesting feedback effects possible \, especially when shaders are included in the processing chain.;#P window linecount 1;#P comment 489 190 95 196617 1. start up camera;#P user panel 3 377 650 16;#X brgb 45 208 235;#X frgb 0 0 0;#X border 0;#X rounded 0;#X shadow 0;#X done;#P hidden newex 20 318 35 196617 sel 27;#P hidden newex 20 297 40 196617 key;#P window linecount 3;#P comment 73 318 183 196617 note that you will probably want to change the size of your textures if you are doing fullscreen...;#P connect 8 0 7 0;#P connect 7 0 12 0;#P connect 12 0 6 0;#P connect 6 0 14 0;#P hidden connect 2 0 11 0;#P connect 11 0 10 0;#P connect 10 0 9 0;#P hidden connect 1 0 2 0;#P connect 15 0 7 1;#P connect 37 0 38 0;#P hidden connect 30 0 29 0;#P connect 35 0 37 1;#P hidden connect 31 0 29 1;#P connect 36 0 37 2;#P fasten 13 0 17 0 462 209 415 209;#P hidden fasten 29 0 17 1 289 209 452 209;#P hidden fasten 33 0 17 2 395 209 489 209;#P pop;