max v2;#N vpatcher 437 78 1225 677;#P window setfont "Sans Serif" 9.;#P window linecount 1;#P hidden newex 660 73 106 196617 bgcolor 190 190 180;#P user panel 758 20 8 47;#X brgb 43 131 255;#X frgb 0 0 0;#X border 0;#X rounded 0;#X shadow 0;#X done;#P user panel 746 20 13 47;#X brgb 255 241 24;#X frgb 0 0 0;#X border 0;#X rounded 0;#X shadow 0;#X done;#P comment 610 52 120 196617 andrewb@cycling74.com;#P window setfont "Sans Serif" 24.;#P comment 608 23 157 196632 TinyVideo;#P user panel 730 20 17 47;#X brgb 232 109 0;#X frgb 0 0 0;#X border 0;#X rounded 0;#X shadow 0;#X done;#P user panel 566 20 166 47;#X brgb 223 244 255;#X frgb 0 0 0;#X border 0;#X rounded 0;#X shadow 0;#X done;#P window setfont "Sans Serif" 9.;#P window linecount 2;#P comment 334 197 75 196617 generate a 10x10 grid;#P window linecount 1;#P comment 258 269 37 196617 row #;#P comment 142 229 82 196617 loop 0-9 \, column;#P newex 396 337 325 196617 jit.gl.mesh foo @draw_mode quads @blend_enable 1 @color 1. 1. 1. 1.;#P hidden newex 397 97 46 196617 select 1;#P message 80 185 14 196617 0;#P message 55 284 33 196617 close;#P message 24 284 30 196617 open;#N vpatcher 30 89 713 358;#P window setfont "Sans Serif" 9.;#P window linecount 2;#P comment 67 184 232 196617 add the quad drawing stuff to our incoming matrix;#P outlet 50 235 15 0;#P window linecount 0;#P newex 50 163 64 196617 jit.op @op +;#P newex 188 79 130 196617 jit.matrix 5 float32 40 10;#P newex 50 103 130 196617 jit.matrix 5 float32 40 10;#P window linecount 2;#P newex 188 100 446 196617 jit.expr @expr "(cell[0]%4.>0.)*(cell[0]%4.<3.)*0.2-0.1" "(cell[0]*0.5%2.>0.6)*0.15-0.075" "0." "(cell[0]%4.>0.)*(cell[0]%4.<3.)*0.1" "(cell[0]*0.5%2.>0.6)*0.1";#P window linecount 1;#P newex 50 80 104 196617 jit.pack 2 @jump 3 2;#P inlet 188 59 15 0;#P inlet 144 60 15 0;#P inlet 50 60 15 0;#P window linecount 2;#P comment 207 133 232 196617 this jit.expr object is the key to how we generate a quad for each point in the incoming matrix \, and assign texture coordinates to each point.;#P connect 1 0 4 0;#P connect 4 0 6 0;#P connect 6 0 8 0;#P connect 8 0 9 0;#P fasten 5 0 8 1 193 148 109 148;#P connect 2 0 4 1;#P connect 3 0 7 0;#P connect 7 0 5 0;#P pop;#P newobj 396 276 128 196617 p gen_quads;#N vpatcher 20 74 463 367;#P window setfont "Sans Serif" 9.;#P comment 62 202 121 196617 scale to normalize values;#P comment 50 181 133 196617 truncate to whole number;#P comment 50 143 133 196617 loop x and divide y by width;#P comment 50 113 146 196617 convert to 2 plane for (x \, y);#P comment 300 71 118 196617 loop to 200 (#of frames);#P newex 183 142 138 196617 jit.op @op % * @val 10. 0.1;#P newex 183 112 130 196617 jit.matrix 2 float32 10 10;#P newex 183 180 82 196617 jit.op @op trunc;#P newex 183 71 116 196617 jit.op @op % @val 100.;#P newex 183 200 126 196617 jit.op @op * @val 0.1 0.1;#P newex 183 50 101 196617 jit.op @op + @val 1.;#P comment 286 50 100 196617 advance 1 frame;#P inlet 183 30 15 0;#P outlet 338 111 15 0;#P outlet 183 222 15 0;#P comment 16 27 130 196617 this patch simply loops each point in the matrix from 0-99 \, and then does the appropriate math for looking up the associated frame;#P connect 3 0 5 0;#P connect 5 0 7 0;#P connect 7 0 9 0;#P connect 9 0 10 0;#P connect 10 0 8 0;#P connect 8 0 6 0;#P connect 6 0 1 0;#P connect 7 0 2 0;#P pop;#P newobj 570 240 91 196617 p animate_frames;#P button 60 343 15 0;#P user jit.pwindow 23 409 82 62 0 0 0 0 1 0;#P comment 648 263 100 196617 turn on animation;#P toggle 24 117 15 0;#P newex 24 145 29 196617 gate;#P toggle 632 263 15 0;#P newex 632 291 29 196617 gate;#P newex 632 312 72 196617 jit.matrix fee;#P button 585 126 15 0;#P newex 585 188 82 196617 jit.op @op trunc;#P newex 585 145 122 196617 jit.noise 1 float32 10 10;#P newex 585 167 114 196617 jit.op @op * @val 100.;#P newex 570 219 147 196617 jit.matrix fee 1 float32 10 10;#P newex 12 479 146 196617 jit.window foo @size 640 480;#P newex 372 147 195 196617 jit.gl.render foo @erase_color 0. 0. 0. 1.;#P newex 372 122 83 196617 t b b b erase;#P user jit.pwindow 395 356 283 201 0 0 0 0 1 0;#N counter 0 99;#X flags 0 0;#P newobj 24 165 68 196617 counter 0 99;#P newex 24 206 93 196617 t b i;#P toggle 337 55 33 0;#P newex 337 97 57 196617 qmetro 33;#P comment 603 126 100 196617 randomize frames;#P comment 40 117 98 196617 capture 100 frames;#P newex 24 314 56 196617 jit.qt.grab;#P newex 107 228 34 196617 % 10;#P newex 222 312 37 196617 + 119;#P newex 222 288 38 196617 * 120;#P newex 222 268 35 196617 * 0.1;#P newex 107 248 38 196617 * 160;#P newex 143 273 37 196617 + 159;#P newex 107 343 66 196617 pack 0 0 0 0;#P message 107 364 172 196617 dstdimstart \$1 \$2 \, dstdimend \$3 \$4;#P comment 93 166 60 196617 count 0-99;#P newex 146 414 167 196617 jit.gl.texture foo @dim 1600 1200;#P newex 107 388 206 196617 jit.matrix 4 char 1600 1200 @usedstdim 1;#P window linecount 2;#P newex 396 193 132 196617 jit.expr @expr "snorm[0]" "snorm[1]*0.75" 0.;#P window linecount 1;#P newex 396 171 130 196617 jit.matrix 3 float32 10 10;#P user panel 12 98 307 378;#X brgb 204 201 60;#X frgb 182 140 32;#X border 1;#X rounded 10;#X shadow 0;#X done;#P fasten 42 0 34 0 85 202 15 202 15 108 29 108;#P connect 34 0 33 0;#P connect 33 0 20 0;#P connect 20 0 19 0;#P connect 19 0 14 0;#P fasten 41 0 14 0 60 306 29 306;#P connect 40 0 14 0;#P connect 14 0 36 0;#P fasten 17 0 33 1 342 140 48 140;#P connect 20 3 42 0;#P connect 19 1 13 0;#P connect 13 0 9 0;#P connect 9 0 7 0;#P connect 7 0 6 0;#P connect 14 0 3 0;#P connect 6 0 3 0;#P connect 37 0 3 0;#P fasten 11 0 7 1 227 309 130 309;#P fasten 9 0 8 0 112 269 148 269;#P connect 8 0 7 2;#P fasten 3 0 4 0 112 409 151 409;#P fasten 12 0 7 3 227 334 166 334;#P fasten 19 1 10 0 112 224 227 224;#P connect 10 0 11 0;#P connect 11 0 12 0;#P connect 18 0 17 0;#P fasten 17 0 22 0 342 117 377 117;#P connect 22 0 23 0;#P fasten 22 3 23 0 449 142 377 142;#P connect 22 1 1 0;#P connect 1 0 2 0;#P connect 2 0 39 0;#P connect 39 0 44 0;#P fasten 4 0 44 0 154 434 380 434 380 329 401 329;#P fasten 3 0 21 0 112 409 391 409 391 355 401 355;#P hidden fasten 18 0 43 0 342 92 402 92;#P fasten 38 0 39 1 575 266 460 266;#P hidden fasten 43 0 39 2 402 119 749 119 749 331 519 331;#P fasten 22 2 25 0 425 144 575 144;#P fasten 28 0 25 0 590 213 575 213;#P connect 25 0 38 0;#P connect 29 0 27 0;#P connect 27 0 26 0;#P connect 26 0 28 0;#P connect 32 0 31 0;#P connect 31 0 30 0;#P connect 38 1 31 1;#P pop;